class SecureAudioTransfer {
    constructor() {
        // KH·ªûI T·∫†O C√ÅC THU·ªòC T√çNH CH√çNH
        this.audioFile = null;           
        this.rsaKeyPair = null;          
        this.sessionKey = null;          
        this.segments = [];              
        this.originalFileData = null;    
        
        // KH·ªûI T·∫†O GIAO DI·ªÜN V√Ä S·ª∞ KI·ªÜN
        this.initializeElements();       
        this.bindEvents();              
        this.addLog('üöÄ H·ªá th·ªëng kh·ªüi ƒë·ªông ho√†n t·∫•t', 'info');
    }

    initializeElements() {
        // C√ÅC ELEMENTS LI√äN QUAN ƒêƒÇN UPLOAD FILE
        this.fileUploadArea = document.getElementById('fileUploadArea');   
        this.audioFileInput = document.getElementById('audioFile');        
        this.fileInfo = document.getElementById('fileInfo');               
        
        // C√ÅC N√öT ƒêI·ªÄU KHI·ªÇN CH√çNH
        this.generateKeysBtn = document.getElementById('generateKeysBtn');  
        this.startTransferBtn = document.getElementById('startTransferBtn'); 
        this.resetBtn = document.getElementById('resetBtn');                
        this.downloadBtn = document.getElementById('downloadBtn');          
        this.verifyBtn = document.getElementById('verifyBtn');              
        
        // C√ÅC ELEMENTS HI·ªÇN TH·ªä TI·∫æN TR√åNH V√Ä TR·∫†NG TH√ÅI
        this.progressSection = document.getElementById('progressSection');  
        this.progressFill = document.getElementById('progressFill');        
        this.progressText = document.getElementById('progressText');       
        this.receiverStatus = document.getElementById('receiverStatus');    
        this.segmentList = document.getElementById('segmentList');         
        this.verificationResult = document.getElementById('verificationResult'); 
        
        // CONTAINER HI·ªÇN TH·ªä LOG
        this.logContainer = document.getElementById('logContainer');        
    }

    bindEvents() {
        // S·ª∞ KI·ªÜN LI√äN QUAN ƒê·∫æN UPLOAD FILE
        this.fileUploadArea.addEventListener('click', () => this.audioFileInput.click());
        
        // X·ª≠ l√Ω k√©o file v√†o v√πng upload
        this.fileUploadArea.addEventListener('dragover', this.handleDragOver.bind(this));
        this.fileUploadArea.addEventListener('drop', this.handleDrop.bind(this));
        
        // X·ª≠ l√Ω khi ch·ªçn file t·ª´ dialog
        this.audioFileInput.addEventListener('change', this.handleFileSelect.bind(this));
        
        // S·ª∞ KI·ªÜN C√ÅC N√öT ƒêI·ªÄU KHI·ªÇN
        this.generateKeysBtn.addEventListener('click', this.generateRSAKeys.bind(this));
        this.startTransferBtn.addEventListener('click', this.startTransfer.bind(this));
        this.resetBtn.addEventListener('click', this.resetApplication.bind(this));
        this.downloadBtn.addEventListener('click', this.downloadReconstructedFile.bind(this));
        this.verifyBtn.addEventListener('click', this.verifyIntegrity.bind(this));
    }

    handleDragOver(e) {
        e.preventDefault();  
        this.fileUploadArea.classList.add('dragover');  
    }

    handleDrop(e) {
        e.preventDefault();  
        this.fileUploadArea.classList.remove('dragover'); 
        const files = e.dataTransfer.files;  
        if (files.length > 0) {
            this.handleFile(files[0]);  
        }
    }

    handleFileSelect(e) {
        const file = e.target.files[0];  // L·∫•y file ƒë∆∞·ª£c ch·ªçn
        if (file) {
            this.handleFile(file);  // X·ª≠ l√Ω file
        }
    }

    /**
     * X·ª≠ l√Ω file ƒë∆∞·ª£c ch·ªçn - ki·ªÉm tra v√† l∆∞u tr·ªØ
     * @param {File} file - File object t·ª´ HTML5 File API
     */
    async handleFile(file) {
        // KI·ªÇM TRA ƒê·ªäNH D·∫†NG FILE
        if (!file.type.startsWith('audio/')) {
            this.addLog('‚ùå L·ªói: Vui l√≤ng ch·ªçn file √¢m thanh h·ª£p l·ªá', 'error');
            return;
        }

        // L√ÄU TR·ªÆ FILE V√Ä CHUY·ªÇN ƒê·ªîI SANG ARRAYBUFFER
        this.audioFile = file;  
        this.originalFileData = await this.fileToArrayBuffer(file);  
        
        // HI·ªÇN TH·ªä TH√îNG TIN FILE
        this.displayFileInfo(file);
        this.addLog(`üìÅ ƒê√£ ch·ªçn file: ${file.name} (${this.formatFileSize(file.size)})`, 'info');
        
        // K√çCH HO·∫†T N√öT T·∫†O KH√ìA
        this.generateKeysBtn.disabled = false;
    }

    /**
     * Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt c·ªßa file
     * @param {File} file - File object
     */
    displayFileInfo(file) {
        // C·∫¨P NH·∫¨T C√ÅC TR∆Ø·ªúNG TH√îNG TIN
        document.getElementById('fileName').textContent = file.name;
        document.getElementById('fileSize').textContent = this.formatFileSize(file.size);
        
        const estimatedDuration = Math.floor(file.size / 16000);
        document.getElementById('fileDuration').textContent = `~${estimatedDuration}s`;
        
        // HI·ªÇN TH·ªä SECTION TH√îNG TIN FILE
        this.fileInfo.style.display = 'block';
    }

    async generateRSAKeys() {
        this.addLog('üîê ƒêang t·∫°o c·∫∑p kh√≥a RSA 2048-bit...', 'info');
        this.generateKeysBtn.disabled = true; 
        
        try {
            // M√î PH·ªéNG QUA√Å TR√åNH T·∫†O KH√ìA (t·ªën th·ªùi gian)
            await this.simulateAsyncOperation(1000);
            
            // T·∫†O C·∫∂P KH√ìA GI·∫¢ L·∫¨P (trong th·ª±c t·∫ø d√πng crypto library)
            this.rsaKeyPair = {
                publicKey: this.generateMockKey('public'),  
                privateKey: this.generateMockKey('private')  
            };
            
            this.addLog('‚úÖ C·∫∑p kh√≥a RSA ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng', 'success');
            this.startTransferBtn.disabled = false;  
            
        } catch (error) {
            this.addLog('‚ùå L·ªói t·∫°o kh√≥a RSA: ' + error.message, 'error');
            this.generateKeysBtn.disabled = false;  
        }
    }

 
    async startTransfer() {
        this.addLog('üì§ B·∫Øt ƒë·∫ßu qu√° tr√¨nh truy·ªÅn file an to√†n...', 'info');
        this.startTransferBtn.disabled = true;          
        this.progressSection.style.display = 'block';   
        
        try {
            // C√ÅC B∆Ø·ªöC TH·ª∞C HI·ªÜN TU·∫¶N T·ª∞
            await this.performHandshake();         
            await this.performAuthentication();     
            await this.processAndEncryptFile();    
            await this.sendSegments();             
            await this.completeTransfer();         
            
        } catch (error) {
            this.addLog('‚ùå L·ªói trong qu√° tr√¨nh truy·ªÅn: ' + error.message, 'error');
            this.resetTransferState();  // Reset tr·∫°ng th√°i n·∫øu c√≥ l·ªói
        }
    }

  
    async performHandshake() {
        this.updateProgress(10, 'B∆∞·ªõc 1: Handshake...');
        await this.simulateAsyncOperation(500);  
        
        // M√î PH·ªéNG TRAO ƒê·ªîI HANDSHAKE
        this.addLog('üëã Ng∆∞·ªùi g·ª≠i: "Hello!"', 'info');
        await this.simulateAsyncOperation(300);  
        
        this.addLog('üì• Ng∆∞·ªùi nh·∫≠n: "Ready!"', 'success');
        this.updateReceiverStatus('ü§ù', 'ƒê√£ k·∫øt n·ªëi', 'Handshake th√†nh c√¥ng');
    }

    
    async performAuthentication() {
        this.updateProgress(25, 'B∆∞·ªõc 2: X√°c th·ª±c & trao ƒë·ªïi kh√≥a...');
        await this.simulateAsyncOperation(800);
        
        // T·∫†O METADATA C·ª¶A FILE
        const metadata = {
            filename: this.audioFile.name,                   
            timestamp: new Date().toISOString(),              
            duration: Math.floor(this.audioFile.size / 16000), 
            size: this.audioFile.size                         
        };
        
        // K√ù METADATA B·∫∞NG RSA + SHA-512
        this.addLog('üîè ƒêang k√Ω metadata b·∫±ng RSA + SHA-512...', 'info');
        await this.simulateAsyncOperation(500);
        
        // T·∫†O KH√ìA PHI√äN CHO TRIPLE DES
        this.sessionKey = this.generateSessionKey();
        this.addLog('üîë SessionKey ƒë√£ ƒë∆∞·ª£c t·∫°o v√† m√£ h√≥a b·∫±ng RSA', 'success');
        
        this.updateReceiverStatus('üîê', 'ƒê√£ x√°c th·ª±c', 'Kh√≥a phi√™n ƒë√£ nh·∫≠n');
    }

    
    async processAndEncryptFile() {
        this.updateProgress(40, 'B∆∞·ªõc 3: Chia file v√† m√£ h√≥a...');
        
        // CHIA FILE TH√ÄNH 3 ƒêO·∫†N B·∫∞NG NHAU
        const fileData = new Uint8Array(this.originalFileData);  
        const segmentSize = Math.ceil(fileData.length / 3);     
        
        this.segments = [];  // Reset m·∫£ng segments
        
        // X·ª¨ L√ù T·ª™NG ƒêO·∫†N
        for (let i = 0; i < 3; i++) {
            // T√çNH TO√ÅN V·ªä TR√ç B·∫ÆT ƒê·∫¶U V√Ä K·∫æT TH√öC
            const start = i * segmentSize;
            const end = Math.min(start + segmentSize, fileData.length);
            const segmentData = fileData.slice(start, end);  // C·∫Øt ƒëo·∫°n
            
            // T·∫†O IV (INITIALIZATION VECTOR) NG·∫™U NHI√äN
            const iv = this.generateIV();
            
            // M√É H√ìA B·∫∞NG TRIPLE DES
            const encryptedData = await this.encryptWithTripleDES(segmentData, this.sessionKey, iv);
            
            // T√çNH HASH SHA-512 CHO IV + ENCRYPTED DATA
            const hash = await this.calculateSHA512(iv, encryptedData);
            
            // T·∫†O CH·ªÆ K√ù RSA CHO HASH
            const signature = this.signWithRSA(hash);
            
            // L∆ØU TR·ªÆ TH√îNG TIN ƒêO·∫†N
            this.segments.push({
                index: i + 1,                                   
                iv: this.arrayBufferToBase64(iv),               
                cipher: this.arrayBufferToBase64(encryptedData), 
                hash: hash,                                      
                signature: signature,                            
                originalData: segmentData                        
            });
            
            this.addLog(`üì¶ ƒêo·∫°n ${i + 1}: ƒê√£ m√£ h√≥a (${encryptedData.length} bytes)`, 'info');
        }
        
        this.updateProgress(60, 'File ƒë√£ ƒë∆∞·ª£c chia th√†nh 3 ƒëo·∫°n v√† m√£ h√≥a');
    }

   
    async sendSegments() {
        this.segmentList.style.display = 'block';  // Hi·ªÉn th·ªã danh s√°ch ƒëo·∫°n
        
        // G·ª¨I T·ª™NG ƒêO·∫†N
        for (let i = 0; i < this.segments.length; i++) {
            const segment = this.segments[i];
            
            // C·∫¨P NH·∫¨T TI·∫æN TR√åNH
            this.updateProgress(70 + i * 8, `ƒêang g·ª≠i ƒëo·∫°n ${i + 1}/3...`);
            await this.simulateAsyncOperation(800);  // M√¥ ph·ªèng th·ªùi gian truy·ªÅn m·∫°ng
            
            // M√î PH·ªéNG TRUY·ªÄN M·∫†NG
            this.addLog(`üì° G·ª≠i ƒëo·∫°n ${i + 1}: IV + Cipher + Hash + Signature`, 'info');
            
            // C·∫¨P NH·∫¨T TR·∫†NG TH√ÅI ƒêO·∫†N T·∫†I NG∆Ø·ªúI NH·∫¨N
            const segmentElement = document.getElementById(`segment${i + 1}`);
            const statusSpan = segmentElement.querySelector('.segment-status');
            statusSpan.textContent = 'üì• ƒê√£ nh·∫≠n';
            segmentElement.classList.add('received');  // Th√™m class CSS
            
            await this.simulateAsyncOperation(300);  // Th·ªùi gian x·ª≠ l√Ω
            
            // KI·ªÇM TRA T√çNH TO√ÄN V·∫∏N ƒêO·∫†N
            const isValid = await this.verifySegment(segment);
            if (isValid) {
                statusSpan.textContent = '‚úÖ H·ª£p l·ªá';
                segmentElement.classList.add('verified');
                this.addLog(`‚úÖ ƒêo·∫°n ${i + 1}: Ki·ªÉm tra hash v√† ch·ªØ k√Ω th√†nh c√¥ng`, 'success');
            } else {
                statusSpan.textContent = '‚ùå L·ªói';
                throw new Error(`ƒêo·∫°n ${i + 1} kh√¥ng h·ª£p l·ªá`);  // D·ª´ng qu√° tr√¨nh n·∫øu l·ªói
            }
        }
    }

 
    async completeTransfer() {
        this.updateProgress(95, 'ƒêang gh√©p file...');
        await this.simulateAsyncOperation(500);
        
        this.addLog('üîß ƒêang gi·∫£i m√£ v√† gh√©p c√°c ƒëo·∫°n...', 'info');
        
        // GI·∫¢I M√É V√Ä GH√âP FILE
        this.reconstructedFile = await this.reconstructFile();
        
        // HO√ÄN TH√ÄNH
        this.updateProgress(100, 'Ho√†n th√†nh!');
        this.updateReceiverStatus('‚úÖ', 'Ho√†n th√†nh', 'File ƒë√£ ƒë∆∞·ª£c nh·∫≠n v√† gh√©p th√†nh c√¥ng');
        
        this.addLog('üéâ Truy·ªÅn file ho√†n t·∫•t! File ƒë√£ ƒë∆∞·ª£c gh√©p th√†nh c√¥ng', 'success');
        this.addLog('üìä ACK ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ng∆∞·ªùi g·ª≠i', 'info');
        
        // K√çCH HO·∫†T C√ÅC N√öT CH·ª®C NƒÇNG
        this.downloadBtn.disabled = false;   // Cho ph√©p t·∫£i xu·ªëng
        this.verifyBtn.disabled = false;     // Cho ph√©p ki·ªÉm tra to√†n v·∫πn
    }

  
    async reconstructFile() {
        const reconstructedSegments = [];
        
        // GI·∫¢I M√É T·ª™NG ƒêO·∫†N
        for (const segment of this.segments) {
            // GI·∫¢I M√É TRIPLE DES
            const decryptedData = await this.decryptWithTripleDES(
                this.base64ToArrayBuffer(segment.cipher),  // D·ªØ li·ªáu m√£ h√≥a
                this.sessionKey,                           // Kh√≥a phi√™n
                this.base64ToArrayBuffer(segment.iv)       // IV
            );
            reconstructedSegments.push(decryptedData);
        }
        
        // GH√âP C√ÅC ƒêO·∫†N L·∫†I
        const totalLength = reconstructedSegments.reduce((sum, segment) => sum + segment.length, 0);
        const reconstructed = new Uint8Array(totalLength);  // T·∫°o m·∫£ng ƒë√≠ch
        let offset = 0;
        
        // SAO CH√âP T·ª™NG ƒêO·∫†N V√ÄO M·∫¢NG ƒê√çCH
        for (const segment of reconstructedSegments) {
            reconstructed.set(segment, offset);  
            offset += segment.length;           
        }
        
        return reconstructed;
    }

   
    async verifyIntegrity() {
        this.addLog('üîç ƒêang ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa file...', 'info');
        
        // CHUY·ªÇN ƒê·ªîI D·ªÆ LI·ªÜU ƒê·ªÇ SO S√ÅNH
        const originalData = new Uint8Array(this.originalFileData);
        const reconstructedData = this.reconstructedFile;
        
        // SO S√ÅNH T·ª™NG BYTE
        let isIdentical = true;
        if (originalData.length !== reconstructedData.length) {
            isIdentical = false;  
        } else {
            // SO S√ÅNH T·ª™NG BYTE
            for (let i = 0; i < originalData.length; i++) {
                if (originalData[i] !== reconstructedData[i]) {
                    isIdentical = false;
                    break;  // Tho√°t s·ªõm khi t√¨m th·∫•y kh√°c bi·ªát
                }
            }
        }
        
        // HI·ªÇN TH·ªä K·∫æT QU·∫¢
        const verificationText = document.getElementById('verificationText');
        const verificationResult = document.getElementById('verificationResult');
        
        if (isIdentical) {
            // FILE TO√ÄN V·∫∏N
            verificationText.innerHTML = `
                <strong>‚úÖ File to√†n v·∫πn ho√†n h·∫£o!</strong><br>
                üìä K√≠ch th∆∞·ªõc g·ªëc: ${originalData.length} bytes<br>
                üìä K√≠ch th∆∞·ªõc sau gh√©p: ${reconstructedData.length} bytes<br>
                üîí T·∫•t c·∫£ ƒëo·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng
            `;
            this.addLog('‚úÖ Ki·ªÉm tra to√†n v·∫πn: File gi·ªëng h·ªát b·∫£n g·ªëc', 'success');
        } else {
            // FILE B·ªä L·ªñI
            verificationText.innerHTML = `
                <strong>‚ùå Ph√°t hi·ªán l·ªói to√†n v·∫πn!</strong><br>
                üìä K√≠ch th∆∞·ªõc g·ªëc: ${originalData.length} bytes<br>
                üìä K√≠ch th∆∞·ªõc sau gh√©p: ${reconstructedData.length} bytes<br>
                ‚ö†Ô∏è File c√≥ th·ªÉ ƒë√£ b·ªã thay ƒë·ªïi trong qu√° tr√¨nh truy·ªÅn
            `;
            this.addLog('‚ùå Ki·ªÉm tra to√†n v·∫πn: File kh√¥ng kh·ªõp v·ªõi b·∫£n g·ªëc', 'error');
        }
        
        verificationResult.style.display = 'block';
    }

   
    downloadReconstructedFile() {
        if (!this.reconstructedFile) {
            this.addLog('‚ùå Kh√¥ng c√≥ file ƒë·ªÉ t·∫£i xu·ªëng', 'error');
            return;
        }
        
        // T·∫†O BLOB T·ª™ D·ªÆ LI·ªÜU
        const blob = new Blob([this.reconstructedFile], { type: this.audioFile.type });
        const url = URL.createObjectURL(blob);  // T·∫°o URL t·∫°m th·ªùi
        
        // T·∫†O ELEMENT <A> ƒê·ªÇ T·∫¢I XU·ªêNG
        const a = document.createElement('a');
        a.href = url;
        a.download = `reconstructed_${this.audioFile.name}`;  // T√™n file t·∫£i xu·ªëng
        document.body.appendChild(a);  
        a.click();                     
        document.body.removeChild(a);  
        URL.revokeObjectURL(url);      
        
        this.addLog(`üíæ File ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng: reconstructed_${this.audioFile.name}`, 'success');
    }

    
    resetApplication() {
        // X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU
        this.audioFile = null;
        this.rsaKeyPair = null;
        this.sessionKey = null;
        this.segments = [];
        this.originalFileData = null;
        this.reconstructedFile = null;
        
        // ·∫®N C√ÅC SECTION KH√îNG C·∫¶N THI·∫æT
        this.fileInfo.style.display = 'none';
        this.progressSection.style.display = 'none';
        this.segmentList.style.display = 'none';
        this.verificationResult.style.display = 'none';
        
        // RESET TR·∫†NG TH√ÅI C√ÅC N√öT
        this.generateKeysBtn.disabled = false;
        this.startTransferBtn.disabled = true;
        this.downloadBtn.disabled = true;
        this.verifyBtn.disabled = true;
        
        // RESET FILE INPUT
        this.audioFileInput.value = '';
        
        // RESET TR·∫†NG TH√ÅI NG∆Ø·ªúI NH·∫¨N
        this.updateReceiverStatus('‚è≥', 'Ch·ªù k·∫øt n·ªëi', 'S·∫µn s√†ng nh·∫≠n file t·ª´ ng∆∞·ªùi g·ª≠i');
        
        // RESET TR·∫†NG TH√ÅI C√ÅC ƒêO·∫†N
        for (let i = 1; i <= 3; i++) {
            const segmentElement = document.getElementById(`segment${i}`);
            const statusSpan = segmentElement.querySelector('.segment-status');
            statusSpan.textContent = '‚è≥ Ch·ªù';
            segmentElement.classList.remove('received', 'verified');
        }
        
        this.logContainer.innerHTML = '<div class="log-entry">üöÄ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c reset...</div>';
        
        this.addLog('üîÑ H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o l·∫°i', 'info');
    }

    /**
     * C·∫≠p nh·∫≠t thanh ti·∫øn tr√¨nh v√† text m√¥ t·∫£
     * @param {number} percentage 
     * @param {string} text 
     */
    updateProgress(percentage, text) {
        this.progressFill.style.width = `${percentage}%`;  
        this.progressText.textContent = text;              
    }

    /**
     * C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa ng∆∞·ªùi nh·∫≠n
     * @param {string} icon 
     * @param {string} title 
     * @param {string} description
     */
    updateReceiverStatus(icon, title, description) {
        const statusCard = this.receiverStatus;
        statusCard.querySelector('.status-icon').textContent = icon;        
        statusCard.querySelector('h3').textContent = `Tr·∫°ng th√°i: ${title}`; 
        statusCard.querySelector('p').textContent = description;             
    }

    /**
     * Th√™m message v√†o log container
     * @param {string} message 
     * @param {string} type 
     */
    addLog(message, type = '') {
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${type}`;  // Th√™m class CSS theo type
        logEntry.textContent = `[${new Date().toLocaleTimeString()}] ${message}`;
        this.logContainer.appendChild(logEntry);   // Th√™m v√†o container
        this.logContainer.scrollTop = this.logContainer.scrollHeight;  
    }

    /**
     * Format k√≠ch th∆∞·ªõc file th√†nh ƒë∆°n v·ªã d·ªÖ ƒë·ªçc
     * @param {number} bytes 
     * @returns {string} 
     */
    formatFileSize(bytes) {
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        if (bytes === 0) return '0 Bytes';
        const i = Math.floor(Math.log(bytes) / Math.log(1024));  // T√≠nh ch·ªâ s·ªë ƒë∆°n v·ªã
        return Math.round(bytes / Math.pow(1024, i) * 100) / 100 + ' ' + sizes[i];
    }

    /**
     * Chuy·ªÉn ƒë·ªïi File object th√†nh ArrayBuffer
     * @param {File} file - File object t·ª´ HTML5 File API
     * @returns {Promise<ArrayBuffer>} Promise ch·ª©a binary data
     */
    fileToArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);  
            reader.onerror = reject;                      
            reader.readAsArrayBuffer(file);                
        });
    }

    /**
     * M√¥ ph·ªèng operation b·∫•t ƒë·ªìng b·ªô v·ªõi delay
     * @param {number} delay 
     * @returns {Promise} 
     */
    simulateAsyncOperation(delay) {
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    /**
     * T·∫°o kh√≥a RSA gi·∫£ l·∫≠p cho demo
     * @param {string} type - Lo·∫°i kh√≥a ('public' ho·∫∑c 'private')
     * @returns {string} Kh√≥a RSA d·∫°ng PEM gi·∫£ l·∫≠p
     */
    generateMockKey(type) {
        // T·∫†O CHU·ªñI NG·∫™U NHI√äN 64 K√ù T·ª∞ (gi·∫£ l·∫≠p kh√≥a Base64)
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        let result = '';
        for (let i = 0; i < 64; i++) {
            result += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        // TR·∫¢ V·ªÄ ƒê·ªäNH D·∫†NG PEM
        return `-----BEGIN ${type.toUpperCase()} KEY-----\n${result}\n-----END ${type.toUpperCase()} KEY-----`;
    }

    /**
     * T·∫°o kh√≥a phi√™n 24-byte cho Triple DES
     * @returns {Uint8Array} M·∫£ng 24 byte ng·∫´u nhi√™n
     */
    generateSessionKey() {
        const key = new Uint8Array(24);  // Triple DES c·∫ßn 24 bytes (192 bits)
        for (let i = 0; i < 24; i++) {
            key[i] = Math.floor(Math.random() * 256);  // Byte ng·∫´u nhi√™n 0-255
        }
        return key;
    }

    /**
     * T·∫°o Initialization Vector 8-byte cho Triple DES
     * @returns {Uint8Array} M·∫£ng 8 byte ng·∫´u nhi√™n
     */
    generateIV() {
        const iv = new Uint8Array(8);   
        for (let i = 0; i < 8; i++) {
            iv[i] = Math.floor(Math.random() * 256);  
        }
        return iv;
    }

    /**
     * M√£ h√≥a d·ªØ li·ªáu b·∫±ng Triple DES (gi·∫£ l·∫≠p)
     * @param {Uint8Array} data - D·ªØ li·ªáu c·∫ßn m√£ h√≥a
     * @param {Uint8Array} key - Kh√≥a 24-byte
     * @param {Uint8Array} iv - IV 8-byte
     * @returns {Promise<Uint8Array>} D·ªØ li·ªáu ƒë√£ m√£ h√≥a
     */
    async encryptWithTripleDES(data, key, iv) {
        // M√î PH·ªéNG TH·ªúI GIAN X·ª¨ L√ù M√É H√ìA
        await this.simulateAsyncOperation(100);
        
        const encrypted = new Uint8Array(data.length);
        for (let i = 0; i < data.length; i++) {
            encrypted[i] = data[i] ^ key[i % key.length] ^ iv[i % iv.length];
        }
        return encrypted;
    }

    /**
     * Gi·∫£i m√£ d·ªØ li·ªáu b·∫±ng Triple DES (gi·∫£ l·∫≠p)
     * @param {Uint8Array} encryptedData - D·ªØ li·ªáu ƒë√£ m√£ h√≥a
     * @param {Uint8Array} key - Kh√≥a 24-byte
     * @param {Uint8Array} iv - IV 8-byte
     * @returns {Promise<Uint8Array>} D·ªØ li·ªáu ƒë√£ gi·∫£i m√£
     */
    async decryptWithTripleDES(encryptedData, key, iv) {
        // M√î PH·ªéNG TH·ªúI GIAN X·ª¨ L√ù GI·∫¢I M√É
        await this.simulateAsyncOperation(100);
        
        // THU·∫¨T TO√ÅN GI·∫¢I M√É (NG∆Ø·ª¢C L·∫†I V·ªöI M√É H√ìA)
        const decrypted = new Uint8Array(encryptedData.length);
        for (let i = 0; i < encryptedData.length; i++) {
            decrypted[i] = encryptedData[i] ^ key[i % key.length] ^ iv[i % iv.length];
        }
        return decrypted;
    }

    /**
     * T√≠nh hash SHA-512 cho IV + data (gi·∫£ l·∫≠p)
     * @param {Uint8Array} iv - Initialization Vector
     * @param {Uint8Array} data - D·ªØ li·ªáu c·∫ßn hash
     * @returns {Promise<string>} Hash SHA-512 d·∫°ng hex
     */
    async calculateSHA512(iv, data) {
        // M√î PH·ªéNG TH·ªúI GIAN T√çNH HASH
        await this.simulateAsyncOperation(50);
        
        // GH√âP IV V√Ä DATA L·∫†I
        const combined = new Uint8Array(iv.length + data.length);
        combined.set(iv, 0);           
        combined.set(data, iv.length); 
        
        let hash = '';
        for (let i = 0; i < combined.length; i += 8) {
            const chunk = combined.slice(i, i + 8);                   
            const sum = chunk.reduce((a, b) => a + b, 0);              
            hash += sum.toString(16).padStart(4, '0');                
        }
        return hash.substring(0, 128); 
    }

    /**
     * K√Ω d·ªØ li·ªáu b·∫±ng RSA (gi·∫£ l·∫≠p)
     * @param {string} data - D·ªØ li·ªáu c·∫ßn k√Ω (th∆∞·ªùng l√† hash)
     * @returns {string} Ch·ªØ k√Ω RSA d·∫°ng Base64
     */
    signWithRSA(data) {
        // T·∫†O CH·ªÆ K√ù GI·∫¢ L·∫¨P
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
        let signature = '';
        for (let i = 0; i < 88; i++) { // Ch·ªØ k√Ω RSA th∆∞·ªùng c√≥ ƒë·ªô d√†i c·ªë ƒë·ªãnh
            signature += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return signature;
    }

    /**
     * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa m·ªôt ƒëo·∫°n
     * @param {Object} segment 
     * @returns {Promise<boolean>} 
     */
    async verifySegment(segment) {
        // M√î PH·ªéNG TH·ªúI GIAN KI·ªÇM TRA
        await this.simulateAsyncOperation(200);
        
        return Math.random() > 0.05;
    }

    /**
     * Chuy·ªÉn ArrayBuffer th√†nh chu·ªói Base64
     * @param {ArrayBuffer|Uint8Array} buffer - D·ªØ li·ªáu binary
     * @returns {string} Chu·ªói Base64
     */
    arrayBufferToBase64(buffer) {
        const bytes = new Uint8Array(buffer);  // ƒê·∫£m b·∫£o l√† Uint8Array
        let binary = '';
        
        // CHUY·ªÇN T·ª™NG BYTE TH√ÄNH CHU·ªñI
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        
        return btoa(binary);
    }

    /**
     * Chuy·ªÉn chu·ªói Base64 th√†nh ArrayBuffer
     * @param {string} base64 
     * @returns {Uint8Array} 
     */
    base64ToArrayBuffer(base64) {
        const binary = atob(base64);                    
        const bytes = new Uint8Array(binary.length);  
        
        // CHUY·ªÇN T·ª™NG K√ù T·ª∞ TH√ÄNH BYTE
        for (let i = 0; i < binary.length; i++) {
            bytes[i] = binary.charCodeAt(i);
        }
        
        return bytes;
    }

    resetTransferState() {
        this.startTransferBtn.disabled = false;                    
        this.progressSection.style.display = 'none';             
        this.updateReceiverStatus('‚ùå', 'L·ªói truy·ªÅn t·∫£i', 'C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh truy·ªÅn');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    window.secureAudioApp = new SecureAudioTransfer();
});